<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>

    <head>
        <name>Dart</name>
        <charsintokens><![CDATA[@$_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]]></charsintokens>
    </head>

    <states>

        <default id="Base" scope="meta.default">

            <state id="Function" scope="language.function">
              <begin><regex>(?:\([^()]*\)\s*)?[-=](?=>)</regex></begin>
              <end><regex>></regex></end>
            </state>

            <state id="Comment" type="comment" scope="comment.block">
                <begin><regex>/\*</regex></begin>
                <end><regex>\*/</regex></end>
            </state>

            <state id="Singleline Comment" type="comment" scope="comment.line">
                <begin><regex>//</regex></begin>
                <end><regex>[\n\r]</regex></end>
            </state>

            <state id="String 3" scope="string">
                <begin><string>"""</string></begin>
                <end><regex>((\\\\)*(?&lt;!\\))"""</regex></end>

                <state id="Interpolated Values" scope="style.value.keyword">
                  <begin><string>${</string></begin>
                  <end><string>}</string></end>
                  <import />
                </state>

            </state>

            <state id="Single String 3" scope="string">
                <begin><string>'''</string></begin>
                <end><regex>((\\\\)*(?&lt;!\\))'''</regex></end>
            </state>

            <state id="String" scope="string">
                <begin><string>"</string></begin>
                <end><regex>((\\\\)*(?&lt;!\\))"</regex></end>

                <state id="Interpolated Values" scope="style.value.keyword">
                  <begin><string>${</string></begin>
                  <end><string>}</string></end>
                  <import mode="Dart" />
                </state>

            </state>

            <state id="Single String" scope="string">
                <begin><string>'</string></begin>
                <end><regex>((\\\\)*(?&lt;!\\))'</regex></end>
            </state>

            <state id="RegularExpression" scope="string.regex">
                <!-- copied from CODA2 Javascript.mode -->
                <begin><regex>(?i)(?&lt;=[=(,:\+~!]|return|;)\s*/(?![/*+{}?\r\n])</regex></begin>
                <end><regex>/[cgimosx]*</regex></end>

                <state id="Escaped Characters" scope="string.regex.escaped.dart">
                    <begin><regex>\\</regex></begin>
                    <end><regex>.</regex></end>
                </state>
            </state>


			<keywords id="Dart Functions" casesensitive="yes" useforautocomplete="yes" scope="keyword.function">
				<string>print</string>
			</keywords>
			
            <keywords id="Keywords" useforautocomplete="yes" scope="keyword.control">
                <string>abstract</string>
                <string>as</string>
                <string>assert</string>
                <string>async</string>
                <string>async*</string>
                <string>await</string>
                <string>break</string>
                <string>case</string>
                <string>catch</string>
                <string>class</string>
                <string>const</string>
                <string>continue</string>
                <string>default</string>
                <string>deferred</string>
                <string>do</string>
                <string>dynamic</string>
                <string>else</string>
                <string>enum</string>
                <string>export</string>
                <string>external</string>
                <string>extends</string>
                <string>factory</string>
                <string>false</string>
                <string>final</string>
                <string>finally</string>
                <string>for</string>
                <string>get</string>
                <string>if</string>
                <string>implements</string>
				<string>import</string>
				<string>in</string>
				<string>is</string>
				<string>library</string>
				<string>new</string>
				<string>null</string>
				<string>operator</string>
				<string>part</string>
				<string>part of</string>
				<string>rethrow</string>
				<string>return</string>
				<string>set</string>
				<string>static</string>
				<string>super</string>
				<string>switch</string>
				<string>sync*</string>
				<string>this</string>
				<string>throw</string>
				<string>true</string>
				<string>try</string>
				<string>typedef</string>
				<string>void</string>
				<string>while</string>
				<string>with</string>
				<string>yeild</string>
				<string>yield*</string>
            </keywords>
            
            <keywords id="Dart Types" useforautocomplete="yes" scope="keyword.type">
	            <string>bool</string>
	            <string>double</string>
	            <string>int</string>
	            <string>List</string>
	            <string>Map</string>
	            <string>num</string>
    	        <string>String</string>
				<string>Symbol</string>
				<string>void</string>
				<string>var</string>

            </keywords>

            <keywords id="Operators" scope="language.operator">
              <regex>([-+*/=!&lt;>%])</regex>
            </keywords>

            <keywords id="Object Keys" scope="language.variable">
              <regex>\s*([\w$]+)\s*[^\w$.]</regex>
            </keywords>

            <keywords id="Numbers" scope="constant.numeric">
              <regex>(?&lt;=[^\w\d]|^)(((([0-9]+\.[0-9]*)|(\.[0-9]+))([eE][+\-]?[0-9]+)?[fFlL]?)|((([1-9][0-9]*)|0[0-7]*|(0[xX][0-9a-fA-F]+))(([uU][lL]?)|([lL][uU]?))?))(?=[^\w\$]|$)</regex>
            </keywords>

            <keywords id="Number Literals" useforautocomplete="yes" scope="constant.numeric.keyword">
                <string>true</string>
                <string>false</string>
                <string>null</string>
            </keywords>

        </default>

    </states>

</syntax>
